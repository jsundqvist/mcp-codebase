import { createJavaScriptParser } from '../../src/parsers/javascript.js';
import { jsQuery } from '../../src/parsers/javascript.js';
import functions from './javascript/functions.test.js';
import arrowFunctions from './javascript/arrow-functions.test.js';
import variables from './javascript/variables.test.js';
import classes from './javascript/classes.test.js';
import asyncAwait from './javascript/async-await.test.js';
import classFields from './javascript/class-fields.test.js';
import destructuring from './javascript/destructuring.test.js';
import errorHandling from './javascript/error-handling.test.js';
import functionCalls from './javascript/function-calls.test.js';
import modules from './javascript/modules.test.js';
import objects from './javascript/objects.test.js';
import operators from './javascript/operators.test.js';
import logicalAssignments from './javascript/logical-assignments.test.js';
import optionalChaining from './javascript/optional-chaining.test.js';
import restSpread from './javascript/rest-spread.test.js';
import templateLiterals from './javascript/template-literals.test.js';
import loops from './javascript/loops.test.js';
import conditionals from './javascript/conditionals.test.js';
import statements from './javascript/statements.test.js';
import comments from './javascript/comments.test.js';

const parser = createJavaScriptParser(jsQuery);

describe('JavaScript', () => {
    functions(parser);
    arrowFunctions(parser);
    variables(parser);
    classes(parser);
    asyncAwait(parser);
    classFields(parser);
    destructuring(parser);
    errorHandling(parser);
    functionCalls(parser);
    modules(parser);
    objects(parser);
    operators(parser);
    logicalAssignments(parser);
    optionalChaining(parser);
    restSpread(parser);
    templateLiterals(parser);
    loops(parser);
    conditionals(parser);
    statements(parser);
    comments(parser);
});
